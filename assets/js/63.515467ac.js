(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{279:function(r,e,a){"use strict";a.r(e);var t=a(5),i=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var r=this,e=r.$createElement,a=r._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker","aria-hidden":"true"}},[r._v("#")]),r._v(" docker")]),r._v(" "),a("blockquote",[a("p",[r._v("安装见: https://www.cnblogs.com/yufeng218/p/8370670.html\n介绍：https://www.cnblogs.com/s-b-b/p/8533932.html")])]),r._v(" "),a("h2",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置","aria-hidden":"true"}},[r._v("#")]),r._v(" 配置")]),r._v(" "),a("h3",{attrs:{id:"镜像加速"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像加速","aria-hidden":"true"}},[r._v("#")]),r._v(" 镜像加速")]),r._v(" "),a("ul",[a("li",[r._v("/etc/docker/daemon.json（Linux）")]),r._v(" "),a("li",[r._v("%programdata%\\docker\\config\\daemon.json（Windows）")])]),r._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[r._v('{\n  "registry-mirrors": ["http://hub-mirror.c.163.com"]\n}\n')])])]),a("h2",{attrs:{id:"常用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用","aria-hidden":"true"}},[r._v("#")]),r._v(" 常用")]),r._v(" "),a("ul",[a("li",[a("p",[r._v("镜像操作")]),r._v(" "),a("ul",[a("li",[r._v("查看当前本地镜像列表: docker images")]),r._v(" "),a("li",[r._v("查看远程相关镜像镜像: docker search 镜像名称")]),r._v(" "),a("li",[r._v("拉取镜像到本地: docker pull xxx")]),r._v(" "),a("li",[r._v("删除镜像: docker rmi 镜像名字\n"),a("ul",[a("li",[r._v("当存在多个名字一样的镜像时候，可以通过指定tag方式来操作，如ubuntu:16.04")])])])])]),r._v(" "),a("li",[a("p",[r._v("容器操作")]),r._v(" "),a("ul",[a("li",[r._v("创建一个docker容器，返回容器的id: docker create 镜像名字")]),r._v(" "),a("li",[r._v("运行docker容器：docker start")]),r._v(" "),a("li",[r._v("新建容器且运行，也就是上面两步一块执行: docker run 镜像名字\n"),a("ul",[a("li",[r._v("如果镜像不在，从源拉去")]),r._v(" "),a("li",[r._v("p：指定映射端口，如运行一个nginx服务，那么我可以设置 -p 8080:80来把本地的8080端口映射到容器里的80端口。")]),r._v(" "),a("li",[r._v("d：容器作为一个守护进程去进行运行，也就是保持后台运行，运行后会返回cotainer id。")])])]),r._v(" "),a("li",[r._v("停止容器: docker stop  容器id")]),r._v(" "),a("li"),r._v(" "),a("li",[r._v("查看进程: docker ps\n"),a("ul",[a("li",[r._v("docker ps -a")])])]),r._v(" "),a("li",[r._v("删除容器: docker rm 容器id")])])]),r._v(" "),a("li",[a("p",[r._v("容器与镜像间的操作")]),r._v(" "),a("ul",[a("li",[r._v("终端连接到容器: docker exec -i -t 容器id bash")]),r._v(" "),a("li",[r._v("复制文件到容器里面: docker cp index.html 镜像id://usr/share/nginx/html")]),r._v(" "),a("li",[r._v('保存更改并生成为一个新的image文件: docker commit -m "mess" 镜像id 镜像名字')])])]),r._v(" "),a("li",[a("p",[r._v("查看容器内的标准输出: docker logs "),a("code",[r._v("CONTAINER ID")]),r._v(" / docker logs "),a("code",[r._v("NAMES")])]),r._v(" "),a("ul",[a("li",[r._v("docker logs -f id/name 类似tail -f")])])]),r._v(" "),a("li",[a("p",[r._v("停止容器: docker stop "),a("code",[r._v("CONTAINER ID")]),r._v(" / docker stop "),a("code",[r._v("NAMES")])])]),r._v(" "),a("li",[a("p",[r._v("查看命令帮助:  docker command --help 如:docker status --help")])]),r._v(" "),a("li",[a("p",[r._v("docker pull training/webapp  # 载入镜像")])]),r._v(" "),a("li",[a("p",[r._v("docker run -d -P training/webapp python app.py")]),r._v(" "),a("ul",[a("li",[r._v("-d:让容器在后台运行。")]),r._v(" "),a("li",[r._v("-P:将容器内部使用的网络端口映射到我们使用的主机上。-p 8080:80来把本地的8080端口映射到容器里的80端口。")])])]),r._v(" "),a("li",[a("p",[r._v("docker run -d -p 5000:5000 training/webapp python app.py  -p 设置端口映射")])]),r._v(" "),a("li",[a("p",[r._v("docker stop id/name")])]),r._v(" "),a("li",[a("p",[r._v("docker start id/name 重启")])]),r._v(" "),a("li",[a("p",[r._v("docker rm id/name 删除容器")]),r._v(" "),a("ul",[a("li",[r._v("删除容器时，容器必须是停止状态.")])])]),r._v(" "),a("li",[a("p",[r._v("查看端口映射: docker port id/name")])]),r._v(" "),a("li",[a("p",[r._v("查看容器进程: docker top  id/name")])]),r._v(" "),a("li",[a("p",[r._v("查看容器底层信息: docker inspect id/name")])])]),r._v(" "),a("h2",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用","aria-hidden":"true"}},[r._v("#")]),r._v(" 使用")]),r._v(" "),a("h3",{attrs:{id:"docker-hello-world"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-hello-world","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker Hello World")]),r._v(" "),a("ul",[a("li",[r._v('docker run ubuntu:15.10 /bin/echo "Hello world"\n'),a("ul",[a("li",[r._v("run:与前面的 docker 组合来运行一个容器。")]),r._v(" "),a("li",[r._v("ubuntu:15.10指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。")]),r._v(" "),a("li",[r._v('/bin/echo "Hello world": 在启动的容器里执行的命令')])])])]),r._v(" "),a("h3",{attrs:{id:"运行交互式的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行交互式的容器","aria-hidden":"true"}},[r._v("#")]),r._v(" 运行交互式的容器")]),r._v(" "),a("ul",[a("li",[r._v("docker run -i -t ubuntu:15.10 /bin/bash\n"),a("ul",[a("li",[r._v("-t:在新容器内指定一个伪终端或终端。")]),r._v(" "),a("li",[r._v("-i:允许你对容器内的标准输入 (STDIN) 进行交互。")])])])]),r._v(" "),a("h3",{attrs:{id:"启动容器（后台模式）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动容器（后台模式）","aria-hidden":"true"}},[r._v("#")]),r._v(" 启动容器（后台模式）")]),r._v(" "),a("ul",[a("li",[r._v('docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"')])]),r._v(" "),a("h2",{attrs:{id:"容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器","aria-hidden":"true"}},[r._v("#")]),r._v(" 容器")]),r._v(" "),a("ul",[a("li",[r._v("docker pull training/webapp  # 载入镜像")]),r._v(" "),a("li",[r._v("docker run -d -P training/webapp python app.py\n"),a("ul",[a("li",[r._v("-d:让容器在后台运行。")]),r._v(" "),a("li",[r._v("-P:将容器内部使用的网络端口映射到我们使用的主机上。")]),r._v(" "),a("li",[r._v("docker run -d -p 5000:5000 training/webapp python app.py  -p 设置端口映射")])])])]),r._v(" "),a("h2",{attrs:{id:"镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#镜像","aria-hidden":"true"}},[r._v("#")]),r._v(" 镜像")]),r._v(" "),a("ul",[a("li",[a("p",[r._v("查看镜像: docker image")]),r._v(" "),a("ul",[a("li",[r._v("REPOSITORY：表示镜像的仓库源")]),r._v(" "),a("li",[r._v("TAG：镜像的标签")]),r._v(" "),a("li",[r._v("IMAGE ID：镜像ID")]),r._v(" "),a("li",[r._v("CREATED：镜像创建时间")]),r._v(" "),a("li",[r._v("SIZE：镜像大小")])])]),r._v(" "),a("li",[a("p",[r._v("获取镜像: docker pull ubuntu:13.10")])]),r._v(" "),a("li",[a("p",[r._v("查找镜像: docker search httpd")])]),r._v(" "),a("li",[a("p",[r._v("创建镜像:")])]),r._v(" "),a("li",[a("p",[r._v("设置镜像标签:  docker tag 860c279d2fec runoob/centos:dev")])])]),r._v(" "),a("h2",{attrs:{id:"docker网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker网络","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker网络")]),r._v(" "),a("ul",[a("li",[a("p",[r._v("单机网络")]),r._v(" "),a("ul",[a("li",[r._v("Bridge Network")]),r._v(" "),a("li",[r._v("Host Network")]),r._v(" "),a("li",[r._v("None Network")])])]),r._v(" "),a("li",[a("p",[r._v("多机网络")]),r._v(" "),a("ul",[a("li",[r._v("Overlay Network")]),r._v(" "),a("li",[r._v("安装插件: etcd")])])]),r._v(" "),a("li",[a("p",[r._v("docker network ls 查看网络")])]),r._v(" "),a("li",[a("p",[r._v("docker network create -h  查看帮助")])]),r._v(" "),a("li",[a("p",[r._v("docker network create -d bridge my-bridge 创建网络类型")])]),r._v(" "),a("li",[a("p",[r._v("docker run -d --name test3 --network my-bridge hello-world-loop")])]),r._v(" "),a("li",[a("p",[r._v("docker network connect -h")])]),r._v(" "),a("li",[a("p",[r._v("docker run -d --name test2 --link test hello-world-loop")])]),r._v(" "),a("li",[a("p",[r._v("测试")]),r._v(" "),a("ul",[a("li",[a("p",[r._v("docker run -d -p 5000:5000 --name test training/webapp python app.py")])]),r._v(" "),a("li",[a("p",[r._v("docker run -d -p 5001:5001 --name test2 --link test training/webapp python app.py")])]),r._v(" "),a("li",[a("p",[r._v("docker network create -d bridge my-bridge 创建网络")])]),r._v(" "),a("li",[a("p",[r._v("docker run -d -p 5003:5003 --network my-bridge --name test3 --link test training/webapp python app.py 指定网络")])]),r._v(" "),a("li",[a("p",[r._v("docker network connect my-bridge test 指定网络连接容器")])])])])]),r._v(" "),a("h3",{attrs:{id:"docker的镜像和容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker的镜像和容器","aria-hidden":"true"}},[r._v("#")]),r._v(" Docker的镜像和容器")]),r._v(" "),a("ul",[a("li",[a("p",[r._v("docker 依赖的底层技术")]),r._v(" "),a("ul",[a("li",[r._v("namespaces:访问隔离(pid,network,mnt)")]),r._v(" "),a("li",[r._v("cgroup:资源控制")]),r._v(" "),a("li",[r._v("ufs:文件系统隔离")])])]),r._v(" "),a("li",[a("p",[r._v("docker -o test.tar test 导出image")])]),r._v(" "),a("li",[a("p",[r._v("docker load -i test.tar 导入image")])]),r._v(" "),a("li",[a("p",[r._v("docker exec -it name bash 进入容器中")])]),r._v(" "),a("li",[a("p",[r._v("docker export containerid -o container.tar 导出容器")])]),r._v(" "),a("li",[a("p",[r._v("docker import container.tar xxxx/aaa  导入")])]),r._v(" "),a("li",[a("p",[r._v("资源监控")]),r._v(" "),a("ul",[a("li",[r._v("docker stats id")]),r._v(" "),a("li",[r._v("docker inspect")])])])]),r._v(" "),a("h2",{attrs:{id:"管理界面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理界面","aria-hidden":"true"}},[r._v("#")]),r._v(" 管理界面")]),r._v(" "),a("blockquote",[a("p",[r._v("DockerUI: http://192.168.56.101:9000\nPortainer: http://192.168.56.101:9001 admin/a**")])]),r._v(" "),a("h3",{attrs:{id:"dockerui"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerui","aria-hidden":"true"}},[r._v("#")]),r._v(" DockerUI")]),r._v(" "),a("h4",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[r._v("#")]),r._v(" 安装")]),r._v(" "),a("ul",[a("li",[r._v("拉取镜像: docker pull uifd/ui-for-docker")]),r._v(" "),a("li",[r._v("启动容器: docker run -it -d --name docker-web -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock docker.io/uifd/ui-for-docker")]),r._v(" "),a("li",[r._v("界面: ip:9000")])]),r._v(" "),a("h4",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[r._v("#")]),r._v(" 总结")]),r._v(" "),a("blockquote",[a("p",[r._v("因为没有登录体系，所以很难在公司里流通。因为这样，每个人都可以去控制，即使通过TLS来控制权限，但无法将容器管理权限分配给某个用户，所以最终放弃该平台。")])]),r._v(" "),a("ul",[a("li",[a("p",[r._v("优点：")]),r._v(" "),a("p",[r._v("支持容器管理\n支持镜像管理\n基于docker api，自身也是一个容器。\n稳定性高\n可动态显示显示容器之间关系图\n容器管理，增加端口映射，增加系统变量、映射目录等")])]),r._v(" "),a("li",[a("p",[r._v("缺点：")]),r._v(" "),a("p",[r._v("没有登录验证，因为没有登录体系，目前解决办法是，只开放本地访问，或者通过TLS来对权限进行控制。\n无法分配某容器给某用户。\n不支持多主机。\n不支持集群swarm等\n功能少\n不支持控制台命令")])])]),r._v(" "),a("h3",{attrs:{id:"shipyard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shipyard","aria-hidden":"true"}},[r._v("#")]),r._v(" Shipyard")]),r._v(" "),a("blockquote",[a("p",[r._v("打不开的，作者已经弃坑此项目: https://blog.hans362.cn/archives/266/")])]),r._v(" "),a("h3",{attrs:{id:"portainer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#portainer","aria-hidden":"true"}},[r._v("#")]),r._v(" Portainer")]),r._v(" "),a("h4",{attrs:{id:"安装-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-2","aria-hidden":"true"}},[r._v("#")]),r._v(" 安装")]),r._v(" "),a("ul",[a("li",[r._v("拉取portainer镜像：\n"),a("ul",[a("li",[r._v("docker pull docker.io/portainer/portainer")])])]),r._v(" "),a("li",[r._v("镜像名打了tag：docker tag docker.io/portainer/portainer portainer")]),r._v(" "),a("li",[r._v("运行,映射端口到9001: docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name portainer portainer/portainer")]),r._v(" "),a("li",[r._v("打开浏览器: ip:9001")])]),r._v(" "),a("blockquote",[a("p",[r._v("注：\n　　如果出现创建用户／密码后，登录异常，查看服务器时间是否太过早（如果太早，则修改，则可以登录）")])]),r._v(" "),a("h4",{attrs:{id:"总结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-2","aria-hidden":"true"}},[r._v("#")]),r._v(" 总结")]),r._v(" "),a("ul",[a("li",[a("p",[r._v("优点\n支持容器管理、镜像管理\n轻量级，消耗资源少\n基于docker api，安全性高，可指定docker api端口，支持TLS证书认证。\n支持权限分配\n支持集群")])]),r._v(" "),a("li",[a("p",[r._v("缺点\n功能不够强大。\n容器创建后，无法通过后台增加端口。")])])])])}],!1,null,null,null);e.default=i.exports}}]);