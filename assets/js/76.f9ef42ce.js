(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{292:function(t,i,e){"use strict";e.r(i);var s=e(5),r=Object(s.a)({},function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),e("ul",[t._m(10),t._v(" "),t._m(11),t._v(" "),e("li",[t._v("git branch:查看当前分支")]),t._v(" "),e("li",[t._v("git branch -vv 查看本地分支和远程分支的关联关系")]),t._v(" "),e("li",[t._v("git branch --set-upstream-to=origin/远程分支的名字 本地分支的名字")]),t._v(" "),e("li",[t._v("git checkout dev 切换分支")]),t._v(" "),e("li",[t._v("git branch -d dev 删除本地分支\n"),e("ul",[e("li",[t._v("git branch -D "),e("name")],1)])]),t._v(" "),e("li",[t._v("git push origin --delete dev　删除远程分支")]),t._v(" "),t._m(12),t._v(" "),e("li",[t._v("查看远程库信息，使用git remote -v；")]),t._v(" "),e("li",[t._v("本地新建的分支如果不推送到远程，对其他人就是不可见的；")]),t._v(" "),e("li",[t._v("从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；")]),t._v(" "),e("li",[t._v("在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；")]),t._v(" "),e("li",[t._v("建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；")]),t._v(" "),e("li",[t._v("从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。")])]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),e("ul",[t._m(24),t._v(" "),t._m(25),t._v(" "),e("li",[e("p",[t._v("git revert(撤消操作)的格式：")]),t._v(" "),t._m(26),t._v(" "),e("ul",[e("li",[e("p",[t._v("格式\ngit revert [--edit | --no-edit] [-n] [-m parent-number] [-s] "),e("commit",[t._v("...git revert --continue git revert --quit git revert --abort")])],1)]),t._v(" "),t._m(27)])])]),t._v(" "),t._m(28),t._v(" "),e("ul",[t._m(29),t._v(" "),e("li",[t._v("git tag")]),t._v(" "),e("li",[t._v("git show "),e("tagname",[t._v("查看标签信息：")])],1),t._v(" "),e("li",[t._v("git tag -d v0.1 删除标签")]),t._v(" "),e("li",[t._v("git push origin v1.0 推送标签到远程")]),t._v(" "),e("li",[t._v("git push origin --tags 一次性推送全部尚未推送到远程的本地标签")]),t._v(" "),t._m(30)]),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._m(37),t._v(" "),t._m(38)])},[function(){var t=this.$createElement,i=this._self._c||t;return i("h1",{attrs:{id:"git-note"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-note","aria-hidden":"true"}},[this._v("#")]),this._v(" GIT NOTE")])},function(){var t=this.$createElement,i=this._self._c||t;return i("h2",{attrs:{id:"基本命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#基本命令","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本命令")])},function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ul",[e("li",[t._v("git remote -v 查看仓库地址")]),t._v(" "),e("li",[t._v("git status 查看本地文件状态")]),t._v(" "),e("li",[t._v("git add filename   提交文件")]),t._v(" "),e("li",[t._v('git commit -m "this is commit　by nohi"   注释')]),t._v(" "),e("li",[t._v("git pull 更新")]),t._v(" "),e("li",[t._v("git log")]),t._v(" "),e("li",[t._v("git reflog用来记录你的每一次命令")])])},function(){var t=this.$createElement,i=this._self._c||t;return i("h2",{attrs:{id:"删除"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#删除","aria-hidden":"true"}},[this._v("#")]),this._v(" 删除")])},function(){var t=this.$createElement,i=this._self._c||t;return i("ul",[i("li",[this._v("git rm test.txt\n"),i("ul",[i("li",[this._v("提交：git push")]),this._v(" "),i("li",[this._v("恢复: git checkout -- test.txt")])])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("h2",{attrs:{id:"远程仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库","aria-hidden":"true"}},[this._v("#")]),this._v(" 远程仓库")])},function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ul",[e("li",[t._v("git remote add origin git@github.com:michaelliao/learngit.git\n"),e("ul",[e("li",[t._v("关联一个远程库")])])]),t._v(" "),e("li",[t._v("git push -u origin master\n"),e("ul",[e("li",[t._v("master推送到远程仓库")]),t._v(" "),e("li",[t._v("-u 第一次推送时，本地与远程进行关联")]),t._v(" "),e("li",[t._v("以后推送只需要执行: git push origin master")])])]),t._v(" "),e("li",[t._v("添加本地项目至远程\n"),e("ul",[e("li",[t._v('git init  -> git add . -> git commit -m "初始化项目与远程git相连接"')]),t._v(" "),e("li",[t._v("连接远程仓库  git remote add origin https://github.com/demo-wx/server.git")]),t._v(" "),e("li",[t._v("本地内容推送到远程仓库: git push -u origin master （-f）其中-f为强制推送")])])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("h2",{attrs:{id:"push本地代码到远程仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#push本地代码到远程仓库","aria-hidden":"true"}},[this._v("#")]),this._v(" Push本地代码到远程仓库")])},function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ul",[e("li",[e("p",[t._v("初始化版本库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$rm -rf .git  // 从别处clone的项目需要删除其版本库\n$git init\n")])])])]),t._v(" "),e("li",[e("p",[t._v("添加文件到版本库（只是添加到缓冲区）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$git add .  // " . "代表添加文件夹下所有的文件\n')])])])]),t._v(" "),e("li",[e("p",[t._v("把缓冲区中的文件添加到本地版本库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$git commit -m "第一次提交"\n')])])])]),t._v(" "),e("li",[e("p",[t._v("关联本地库和远程库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote add origin git@xxx.git(远程仓库地址)\n")])])])]),t._v(" "),e("li",[e("p",[t._v("将代码推送到远程仓库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push -u origin master  // 第一次推送时\ngit push origin master  // 第一次推送后，直接使用该命令即可推送修改\n")])])])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("h2",{attrs:{id:"分支相关"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分支相关","aria-hidden":"true"}},[this._v("#")]),this._v(" 分支相关")])},function(){var t=this.$createElement,i=this._self._c||t;return i("li",[this._v("git branch -a 查看本地和远程所有分支\n"),i("ul",[i("li",[this._v("git branch -r 查看远程分支")]),this._v(" "),i("li",[this._v("git checkout -b 本地分支名x origin/远程分支名x")])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("li",[this._v("git checkout -b dev : 创建dev分支\n"),i("ul",[i("li",[this._v("-b 表示创建并切换，相当于git branch dev & git checkout dev")])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("li",[this._v("合并分到 dev 至master\n"),i("ul",[i("li",[this._v("git checkout master  切换至master")]),this._v(" "),i("li",[this._v("git merge dev  合并")])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("h2",{attrs:{id:"push-提交"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#push-提交","aria-hidden":"true"}},[this._v("#")]),this._v(" PUSH 提交")])},function(){var t=this.$createElement,i=this._self._c||t;return i("ul",[i("li",[this._v("git push origin iss53 提交本地代码支分支iss53")])])},function(){var t=this.$createElement,i=this._self._c||t;return i("h2",{attrs:{id:"stash"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#stash","aria-hidden":"true"}},[this._v("#")]),this._v(" Stash")])},function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ul",[e("li",[e("p",[t._v("git stash list 显示保存进度的列表")])]),t._v(" "),e("li",[e("p",[t._v("git stash 保存当前工作进度")])]),t._v(" "),e("li",[e("p",[t._v("git stash save 'message...' 可以添加一些注释")])]),t._v(" "),e("li",[e("p",[t._v("git stash pop 恢复最新的进度到工作区。git默认会把工作区和暂存区的改动都恢复到工作区。")]),t._v(" "),e("ul",[e("li",[t._v("恢复的同时把stash内容也删了")])])]),t._v(" "),e("li",[e("p",[t._v("git stash pop --index 恢复最新的进度到工作区和暂存区。（尝试将原来暂存区的改动还恢复到暂存区）")])]),t._v(" "),e("li",[e("p",[t._v("git stash pop stash@{1}恢复指定的进度到工作区。stash_id是通过git stash list命令得到的\n通过git stash pop命令恢复进度后，会删除当前进度。")])]),t._v(" "),e("li",[e("p",[t._v("git stash apply [–index] [stash_id]")])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("blockquote",[i("p",[this._v("除了不删除恢复的进度之外，其余和git stash pop 命令一样。")])])},function(){var t=this.$createElement,i=this._self._c||t;return i("ul",[i("li",[this._v("git stash drop [stash_id] 删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。")]),this._v(" "),i("li",[this._v("git stash clear 删除所有存储的进度")])])},function(){var t=this.$createElement,i=this._self._c||t;return i("h2",{attrs:{id:"log"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#log","aria-hidden":"true"}},[this._v("#")]),this._v(" log")])},function(){var t=this.$createElement,i=this._self._c||t;return i("ul",[i("li",[this._v("git log")]),this._v(" "),i("li",[this._v("git log --pretty=oneline 显示一行")]),this._v(" "),i("li",[this._v("git log --graph --pretty=oneline --abbrev-commit")])])},function(){var t=this.$createElement,i=this._self._c||t;return i("h2",{attrs:{id:"回滚"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#回滚","aria-hidden":"true"}},[this._v("#")]),this._v(" 回滚")])},function(){var t=this.$createElement,i=this._self._c||t;return i("ul",[i("li",[this._v("未commit前： git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。")]),this._v(" "),i("li",[this._v("git commit 前")])])},function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[this._v("如果只回退一个最新commit：git reset HEAD^\n如果需要回退多个commit：git reset 回退至的commit hash码\n如果直接要舍弃commit的内容，命令末尾加--hard\n多次commit后，例：c1 c2 c3.    可以随便切换commit时的版本 git reset commitId\n`git reflog` 查看历史操作命令记录\n\n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。 ( git reset HEAD^  / git reset commitid)\n")])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("li",[i("p",[this._v("git commit 后")]),this._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[this._v("1. 使用git revert commitid\n\n2. -- reset 退到某次提交，那该提交之后的提交都会回滚，不过这种覆盖是不可逆的，之前的提交记录都没有了。所以平时开发中尽量注意，避免使用reset。\n3. git  reset --hard  commit_id\n4. 3执行完后，执行git push,报错：\n    ! [rejected]        master -> master (non-fast-forward)\n    error: failed to push some refs to 'https://github.com/thisisnohi/test_git'\n    hint: Updates were rejected because the tip of your current branch is behind\n    hint: its remote counterpart. Integrate the remote changes (e.g.\n    hint: 'git pull ...') before pushing again.\n    hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n  解决方法：git pull + 远程名+ 分支名操作  若是想直接强制推送，可以加上 -f 参数强制push\n    第一种. git push -f origin master 强制提交，不可逆转\n    第二种. git reset 最新的commit_id 然后git add file   git commit  git push\n    \t\t\t (参见：https://blog.csdn.net/qq_36460164/article/details/79857431)\n  \t \n")])])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("li",[i("p",[this._v("git reset/revert")]),this._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[this._v("git reset –soft 不会改变stage区，仅仅将commit回退到了指定的提交 \ngit reset –mixed 不回改变工作区，但是会用指定的commit覆盖stage 区，之前所有暂存的内容都变为为暂存的状态 \ngit reset –hard 使用指定的commit的内容覆盖stage区和工作区。\n\ngit revert用于反转提交,执行命令时要求工作树必须是干净的.\ngit revert用一个新提交来消除一个历史提交所做的任何修改.\ngit revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit\n")])])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("blockquote",[i("p",[this._v("撤销某次操作，此次操作之前的commit都会被保留. git reset 是撤销某次提交，但是此次之后的修改都会被退回到暂存区.")])])},function(){var t=this.$createElement,i=this._self._c||t;return i("li",[i("p",[this._v("示例")]),this._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[this._v("git revert HEAD~3：丢弃最近的三个commit，把状态恢复到最近的第四个commit，并且提交一个新的commit来记录这次改变。\ngit revert -n master~5..master~2：丢弃从最近的第五个commit（包含）到第二个（不包含）,但是不自动生成commit，这个revert仅仅修改working tree和index。\n")])])]),i("p",[i("code",[this._v("建议，你可以用git revert来撤销已经提交的更改，而git reset用来撤销没有提交的更改")])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("h2",{attrs:{id:"标签"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#标签","aria-hidden":"true"}},[this._v("#")]),this._v(" 标签")])},function(){var t=this.$createElement,i=this._self._c||t;return i("li",[this._v("git tag v1.0 打标签\n"),i("ul",[i("li",[this._v("打当前版本")]),this._v(" "),i("li",[this._v("git tag v0.9 f52c633 打历史版本")]),this._v(" "),i("li",[this._v('git tag -a v0.1 -m "version 0.1 released" 1094adb 增加说明')])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("li",[this._v("删除标签\n"),i("ul",[i("li",[this._v("git tag -d v0.9 删除本地")]),this._v(" "),i("li",[this._v("git push origin :refs/tags/v0.9")])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("h2",{attrs:{id:"faq"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#faq","aria-hidden":"true"}},[this._v("#")]),this._v(" FAQ")])},function(){var t=this.$createElement,i=this._self._c||t;return i("h3",{attrs:{id:"gitbash-免密"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#gitbash-免密","aria-hidden":"true"}},[this._v("#")]),this._v(" gitbash 免密")])},function(){var t=this.$createElement,i=this._self._c||t;return i("ul",[i("li",[this._v("git config --global credential.helper store")]),this._v(" "),i("li",[this._v("需要输入一次用户名密码后，下次执行git就不需要密码")])])},function(){var t=this.$createElement,i=this._self._c||t;return i("h3",{attrs:{id:"配置ssh-key免密登录"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#配置ssh-key免密登录","aria-hidden":"true"}},[this._v("#")]),this._v(" 配置ssh-key免密登录")])},function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ol",[e("li",[e("p",[t._v('$ ssh-keygen -t rsa -C "youremail@youremail.com"'),e("br"),t._v("\nGenerating public/private rsa key pair... 三次回车即可生成 ssh key\n不需要输入密码")])]),t._v(" "),e("li",[e("p",[t._v("拷贝公钥至github里。默认公钥文件 ~/.ssh/id_rsa.pub")])]),t._v(" "),e("li",[e("p",[t._v("如果存在多个账户、需要连接不同仓库。~/.ssh/目录增加文件 config")])]),t._v(" "),e("li",[e("p",[t._v("config文件如下")])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[this._v("# 配置github.com\nHost github.com                 \n    HostName github.com\n    IdentityFile C:\\\\Users\\\\\\nohi\\\\.ssh\\\\thisisnohi_github.com\n    PreferredAuthentications publickey\n    User thisisnohi\n\n# 配置work.scfsoft.com\nHost work.scfsoft.com\n    HostName work.scfsoft.com\n#\tport 90\n    IdentityFile C:\\\\Users\\\\\\nohi\\\\.ssh\\\\dinglonghai\n    PreferredAuthentications publickey\n    User dinglonghai\n")])])])},function(){var t=this.$createElement,i=this._self._c||t;return i("ol",{attrs:{start:"5"}},[i("li",[this._v("测试　ssh -T git@github.com")])])},function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ul",[e("li",[e("p",[t._v("Your branch is ahead of 'origin/master' by 21 commits.")]),t._v(" "),e("ul",[e("li",[t._v("提交本地内容: git push origin")]),t._v(" "),e("li",[t._v("删除本地分支: git reset --hard origin/master")])])]),t._v(" "),e("li",[e("p",[t._v("pull遇到错误：error: Your local changes to the following files would be overwritten by merge:")])]),t._v(" "),e("li",[e("p",[t._v("保存本地修改")]),t._v(" "),e("ul",[e("li",[t._v("git stash")]),t._v(" "),e("li",[t._v("git pull  [origin master]")]),t._v(" "),e("li",[t._v("git stash pop")])])]),t._v(" "),e("li",[e("p",[t._v("否")]),t._v(" "),e("ul",[e("li",[t._v("git reset --hard")]),t._v(" "),e("li",[t._v("git pull origin master")])])])])}],!1,null,null,null);i.default=r.exports}}]);